import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet import preprocess_input
from tensorflow.keras.preprocessing import image
import numpy as np

# Load pre-trained ResNet-50 model without top layers (only feature extraction)
base_model = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Function to preprocess image and extract features
def extract_features(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    features = base_model.predict(img_array)
    return features

# Example usage
img_path = 'path_to_your_image.jpg'
img_features = extract_features(img_path)
print(f'Extracted features shape: {img_features.shape}')
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Embedding, Dense, Attention

# Define the captioning model
inputs1 = Input(shape=(img_features.shape[1],))
fe1 = Dense(256, activation='relu')(inputs1)
inputs2 = Input(shape=(max_length,))
se1 = Embedding(vocab_size, 256, mask_zero=True)(inputs2)
se2 = LSTM(256)(se1)
decoder1 = add([fe1, se2])
decoder2 = Dense( units using ins features words
